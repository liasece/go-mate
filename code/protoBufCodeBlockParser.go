package code

import "regexp"

var (
	ProtoBlockTypeImport = BlockType{
		Name:                   "import",
		RegStr:                 regexp.MustCompile(`(?s)^\s*(import\s*(.+?);?\n?)\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{},
		RegSubContentTypeNames: [][]string{},
		SubMergeType:           []*MergeConfig{},
		ParentNames:            nil,
		SubsSeparator:          "",
		SubWarpChar:            "",
		RegSubWarpContentIndex: 1,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypePackage = BlockType{
		Name:                   "package",
		RegStr:                 regexp.MustCompile(`(?s)^\s*(package\s*(.+?);?\n?)\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{},
		RegSubContentTypeNames: [][]string{},
		SubMergeType:           []*MergeConfig{},
		ParentNames:            nil,
		SubsSeparator:          "",
		SubWarpChar:            "",
		RegSubWarpContentIndex: 1,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeSyntax = BlockType{
		Name:                   "syntax",
		RegStr:                 regexp.MustCompile(`(?s)^\s*(syntax\s*=\s*(.+?);?\n?)\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{},
		RegSubContentTypeNames: [][]string{},
		SubMergeType:           []*MergeConfig{},
		ParentNames:            nil,
		SubsSeparator:          "",
		SubWarpChar:            "",
		RegSubWarpContentIndex: 1,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeService = BlockType{
		Name:                   "service",
		RegStr:                 regexp.MustCompile(`(?s)^\s*(service\s+(\w+)\s*(\{\s?(.*?\n?)\s*\}\n?))\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{4},
		RegSubContentTypeNames: [][]string{nil},
		SubMergeType:           []*MergeConfig{{Append: true, ReplaceBlockType: nil}},
		ParentNames:            nil,
		SubsSeparator:          "\n",
		SubWarpChar:            "{}",
		RegSubWarpContentIndex: 3,
		KeyCaseIgnored:         false,
		SubTailChar:            []string{";", "}"},
	}
	ProtoBlockTypeRPC = BlockType{
		Name:                   "rpc",
		RegStr:                 regexp.MustCompile(`(?s)^\s*(rpc\s+(\w+)\s*\(.*?\)\s*returns\s*\(.*?\)\s*(\{\n?(\s*.*?\n?)\s*\})?\s*?;?\n?(\s*//.*)?)\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{4},
		RegSubContentTypeNames: [][]string{nil},
		SubMergeType:           []*MergeConfig{nil},
		ParentNames:            nil,
		SubsSeparator:          "\n",
		SubWarpChar:            "{}",
		RegSubWarpContentIndex: 3,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeMessage = BlockType{
		Name:                   "message",
		RegStr:                 regexp.MustCompile(`(?s)^\s*(message\s+(\w+)\s*(\{\n?(.*?\n?)\s*\})\s*?;?\n?)\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{4},
		RegSubContentTypeNames: [][]string{nil},
		SubMergeType:           []*MergeConfig{{Append: true, ReplaceBlockType: nil}},
		ParentNames:            nil,
		SubsSeparator:          "\n",
		SubWarpChar:            "{}",
		RegSubWarpContentIndex: 3,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeMessageField = BlockType{
		Name:                   "message_field",
		RegStr:                 regexp.MustCompile(`(?s)\s*((optional)?(repeated)?\s*([a-zA-Z0-9.<>, ]+)?\s+(\w+)\s*=\s*(\d+)\s*(\[(.*?)\])?;?\n?(\s*//.*)?)\s*?`),
		RegOriginIndex:         1,
		RegKeyIndex:            5,
		RegSubContentIndex:     []int{8},
		RegSubContentTypeNames: [][]string{nil},
		SubMergeType:           []*MergeConfig{{Append: true, ReplaceBlockType: nil}},
		ParentNames:            nil,
		SubsSeparator:          ",|\n",
		SubWarpChar:            "[]",
		RegSubWarpContentIndex: 7,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeOption = BlockType{
		Name:                   "option",
		RegStr:                 regexp.MustCompile(`(?s)^\s*(option\s+(.+?)\s*=\s*(\{?\s*(.*?)\s*\}?)?\s*?;?\n?)\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{4},
		RegSubContentTypeNames: [][]string{nil},
		SubMergeType:           []*MergeConfig{{Append: true, ReplaceBlockType: nil}},
		ParentNames:            nil,
		SubsSeparator:          ",",
		SubWarpChar:            "{}",
		RegSubWarpContentIndex: 3,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeOptionItem = BlockType{
		Name:                   "option_item",
		RegStr:                 regexp.MustCompile(`(?s)(\s*(\w+)\s*[:=]\s*([^,]+))\s*`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{},
		RegSubContentTypeNames: [][]string{},
		SubMergeType:           []*MergeConfig{},
		ParentNames:            []string{"option", "message_field"},
		SubsSeparator:          "",
		SubWarpChar:            "",
		RegSubWarpContentIndex: 0,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeOptionItem2 = BlockType{
		Name:                   "option_item2",
		RegStr:                 regexp.MustCompile(`(?s)\s*(\"([^\n]*)\")\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{},
		RegSubContentTypeNames: [][]string{},
		SubMergeType:           []*MergeConfig{},
		ParentNames:            []string{"option", "message_field"},
		SubsSeparator:          "",
		SubWarpChar:            "",
		RegSubWarpContentIndex: 0,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeEnum = BlockType{
		Name:                   "enum",
		RegStr:                 regexp.MustCompile(`(?s)^\s*(enum\s*(.+?)\s*(\{\s*(.*)\s*\})\s*?;?\n?)\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{4},
		RegSubContentTypeNames: [][]string{nil},
		SubMergeType:           []*MergeConfig{{Append: true, ReplaceBlockType: nil}},
		ParentNames:            nil,
		SubsSeparator:          "\n",
		SubWarpChar:            "{}",
		RegSubWarpContentIndex: 3,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeEnumItem = BlockType{
		Name:                   "enum_item",
		RegStr:                 regexp.MustCompile(`(?s)\s*((\w+)\s*[:=]\s*(\S+))\s*`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{},
		RegSubContentTypeNames: [][]string{},
		SubMergeType:           []*MergeConfig{},
		ParentNames:            []string{"enum"},
		SubsSeparator:          "",
		SubWarpChar:            "",
		RegSubWarpContentIndex: 1,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
	ProtoBlockTypeReserved = BlockType{
		Name:                   "reserved",
		RegStr:                 regexp.MustCompile(`(?s)^\s*(reserved\s*(.+?);?\n?)\s*$`),
		RegOriginIndex:         1,
		RegKeyIndex:            2,
		RegSubContentIndex:     []int{},
		RegSubContentTypeNames: [][]string{},
		SubMergeType:           []*MergeConfig{},
		ParentNames:            nil,
		SubsSeparator:          "",
		SubWarpChar:            "",
		RegSubWarpContentIndex: 1,
		KeyCaseIgnored:         false,
		SubTailChar:            nil,
	}
)

func NewProtoBufCodeBlockParser() *BlockParser {
	return &BlockParser{
		Types: []BlockType{
			ProtoBlockTypeImport,
			ProtoBlockTypePackage,
			ProtoBlockTypeSyntax,
			ProtoBlockTypeService,
			ProtoBlockTypeRPC,
			ProtoBlockTypeMessage,
			ProtoBlockTypeMessageField,
			ProtoBlockTypeOption,
			ProtoBlockTypeOptionItem,
			ProtoBlockTypeOptionItem2,
			ProtoBlockTypeEnum,
			ProtoBlockTypeEnumItem,
			ProtoBlockTypeReserved,
		},
		PairKeys:           []string{"{}", "[]", "()"},
		LineCommentKey:     "//",
		OriginText:         nil,
		PendingLinePrefix:  "",
		HeadViscousPairKey: nil,
	}
}
